apiVersion: batch/v1
kind: CronJob
metadata:
  name: aqua-enforcer-tester
  namespace: aqua
spec:
  schedule: "* * * * *"
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: 'aqua-enforcer-sa'
          containers:
            - name: test-aqua-enforcer
              image: 'alpine/k8s:1.26.2'
              imagePullPolicy: Always
              command:
                - /bin/bash
              args:
                - '-c'
                - >-
                  echo "Checking Aqua Enforcer";
                  sleep 5;
                  timeout_seconds=420; 
                  retry_interval=30; 
                  max_retry_attempts=5; 
                  start_time=$(date +%s);
                  aqua_enforcer_pods=($(kubectl get pods -n aqua -l app=aqua-enforcer-ds --field-selector=status.phase==Running -o jsonpath="{.items[*].metadata.name}"));
                  
                  for aqua_enforcer_pod in "${aqua_enforcer_pods[@]}"; do
                      while true; do
                          current_time=$(date +%s); elapsed_time=$((current_time - start_time));
                  
                          if [ $elapsed_time -ge $timeout_seconds ]; then
                              echo "Error: Timeout reached while waiting for Aqua Enforcer pods to be ready.";
                              exit 1;
                          fi;
                  
                          aqua_enforcer_pod_status=$(kubectl get pod $aqua_enforcer_pod -n aqua -o jsonpath="{.status.phase}");
                  
                          if [[ $aqua_enforcer_pod_status != "Running" ]]; then
                              echo "LOG: Pod $aqua_enforcer_pod, $aqua_enforcer_pod_status";
                              sleep 15;
                          else
                              echo "LOG: Pod $aqua_enforcer_pod, Running";
                              break;
                          fi;
                      done;
                  done;
                  
                  for aqua_enforcer_pod in "${aqua_enforcer_pods[@]}"; do
                      kubectl exec -n aqua $aqua_enforcer_pod -- timeout 30s /opt/aquasec/./slkaudit > /var/log/enforcer_testjob.log 2>&1
                      grep -iq "Successfully connected to gateway" /var/log/enforcer_testjob.log
                      grep_exit_code=$?;
                  
                      if [ $grep_exit_code -eq 0 ]; then
                          echo "Success: Aqua Enforcer pod $aqua_enforcer_pod is running and connected";
                      else
                          echo "Error: Aqua Enforcer pod $aqua_enforcer_pod failed to connect.";
                          echo "Retrying for 5 minutes.";
                  
                          start_time_retry=$(date +%s); retry_elapsed_time=0;
                  
                          while [ $retry_elapsed_time -lt $((retry_interval * max_retry_attempts)) ]; do
                              kubectl exec -n aqua $aqua_enforcer_pod -- timeout 30s /opt/aquasec/./slkaudit > /var/log/enforcer_testjob.log 2>&1
                              grep -iq "Successfully connected to gateway" /var/log/enforcer_testjob.log
                              grep_exit_code=$?;
                  
                              if [ $grep_exit_code -eq 0 ]; then
                                  echo "Success: Aqua Enforcer pod $aqua_enforcer_pod is running and connected after retry.";
                                  break;
                              else
                                  echo "Retry: Aqua Enforcer pod $aqua_enforcer_pod failed to connect. Retrying in 30 seconds.";
                                  sleep $retry_interval;
                                  retry_elapsed_time=$((retry_elapsed_time + retry_interval));
                              fi;
                          done;
                  
                          if [ $grep_exit_code -ne 0 ]; then
                              echo "Error: Retry limit reached. Aqua Enforcer pod $aqua_enforcer_pod still failed to connect.";
                              exit 1;
                          fi;
                      fi;
                  done;
                  
                  echo "Job completed successfully for all Aqua Enforcer pods.";
                  exit 0;
          restartPolicy: Never
      backoffLimit: 1

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: aqua-enforcer-exec-role
  namespace: aqua
rules:
  - apiGroups: [""]
    resources: ["pods/exec"]
    verbs: ["create"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: aqua-enforcer-exec-binding
  namespace: aqua
subjects:
  - kind: ServiceAccount
    name: aqua-enforcer-sa
    namespace: aqua
roleRef:
  kind: Role
  name: aqua-enforcer-exec-role
  apiGroup: rbac.authorization.k8s.io
