name: Run CI for ISV Addons

on:
  pull_request:
    branches: [main]
    types: [opened, reopened, synchronize]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.pull_request.head.ref }}

    - name: Find Namespace YAML
      id: find-namespace-yaml
      run: |
        files=$(curl -s "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files" | jq -r '.[].filename')
        echo $files
        namespace_file=$(echo "$files" | grep "namespace.yaml")
        if [ -n "$namespace_file" ]; then
          subdirectory=$(dirname $namespace_file)
          echo "Sub Directory = $subdirectory"
          echo "$subdirectory" > subdirectory.tmp
          namespace_name=$(grep -E '^\s*metadata:\s*$|^\s*name:\s*' "$namespace_file" | awk -F':' '{gsub(/ /, "", $2); print $2}')
          if [[ ! -z $namespace_name ]]; then
            echo "$namespace_name" > namespace.tmp
            cat namespace.tmp
          else 
            echo "No Namespace found"
            exit 100
          fi
        else 
          echo "No namespace.yaml file found"
          exit 200
        fi
          
    - name: Merge PR Branch and Push to Developer Branch
      run: |
        namespace_name=$(cat namespace.tmp)
        namespace=$(echo $namespace_name | xargs echo -n)
        echo $namespace
        config_map_file="config-map-$namespace-${{ github.event.pull_request.number }}.yml"
        echo $config_map_file
        echo "apiVersion: v1" >> $config_map_file
        echo "kind: ConfigMap" >> $config_map_file
        echo "metadata:" >> $config_map_file
        echo "  name: $namespace-configmap" >> $config_map_file
        echo "data:" >> $config_map_file
        echo "  Namespace: ${namespace}" >> $config_map_file
        echo "  prNumber: ${{ github.event.pull_request.number }}" >> $config_map_file
        subdirectory_name=$(cat subdirectory.tmp)
        echo $subdirectory_name
        echo $config_map_file
        git config --local user.email "dev@null"
        git config --local user.name "Conformitron Bot"
        git fetch origin developer_branch
        git checkout developer_branch
        git merge --no-ff ${{ github.event.pull_request.head.sha }} --allow-unrelated-histories
        git push origin developer_branch
        # namespace_name=$(cat namespace.tmp)
        # namespace=$(echo $namespace_name | xargs echo -n)
        # echo $namespace
        # config_map_file="config-map-$namespace-${{ github.event.pull_request.number }}.yml"
        # echo $config_map_file
        # echo "apiVersion: v1" >> $config_map_file
        # echo "kind: ConfigMap" >> $config_map_file
        # echo "metadata:" >> $config_map_file
        # echo "  name: $namespace-configmap" >> $config_map_file
        # echo "data:" >> $config_map_file
        # echo "  Namespace: ${namespace}" >> $config_map_file
        # echo "  prNumber: ${{ github.event.pull_request.number }}" >> $config_map_file
        # subdirectory_name=$(cat subdirectory.tmp)
        # echo $subdirectory_name
        # echo $config_map_file
        # rm subdirectory.tmp namespace.tmp
        # mv $config_map_file ./$subdirectory_name/
        # git add .
        # git commit -m "Add config map for namespace $namespace and PR number ${{ github.event.pull_request.number }}"
        # git push origin developer_branch
